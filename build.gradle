plugins {
    id 'java-library'
    id 'java'
    id 'groovy'
    id 'pl.allegro.tech.build.axion-release' version '1.13.6'
    id 'io.freefair.lombok' version '8.4'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'com.github.jk1.dependency-license-report' version '2.5'
    id 'maven-publish'
    id 'signing'
}

apply plugin: 'pl.allegro.tech.build.axion-release'

group 'com.attraqt'
version scmVersion.version

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}


build {
    // Check license of dependencies (dependency-license-report plugin).
    // Fails if dependency added that not in allowed-licenses.json list.
    dependsOn checkLicense
    // Check license header is correct (cadixdev licenser plugin).
    // Use updateLicenses goal to fix if this goal fails.
    // updateLicenses is not used in build, so that CI/CD does
    // not change source.
    dependsOn checkLicenses
}

scmVersion {
    tag.prefix = project.name
}

license {
    header = project.file('src/main/resources/LICENSE-HEADER')
}

licenseReport {
    allowedLicensesFile = new File('src/main/resources/allowed-licenses.json')
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    // Updated Lombok for Java 21
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    
    // Updated Jackson (was 2.2.1, now 2.16.0)
    api 'com.fasterxml.jackson.core:jackson-annotations:2.16.0'
    api 'com.fasterxml.jackson.core:jackson-core:2.16.0'
    api 'com.fasterxml.jackson.core:jackson-databind:2.16.0'

    // Updated Guava (was 17.0, now 32.1.3)
    implementation 'com.google.guava:guava:32.1.3-jre'
    
    // MAJOR CHANGE: javax.ws.rs -> jakarta.ws.rs (requires source code changes)
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api:3.1.0'
    
    // Updated Jersey to Jakarta version (was 2.23.1, now 3.1.5)
    api 'org.glassfish.jersey.core:jersey-client:3.1.5'
    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:3.1.5'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:3.1.5'
    
    // Updated SLF4J (was 1.7.30, now 2.0.9)
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'org.slf4j:slf4j-simple:2.0.9'

    // Updated test dependencies
    // Groovy updated from 2.4.13 to 4.0.15 for Java 21 support
    testImplementation 'org.apache.groovy:groovy-all:4.0.15'
    
    // Spock updated from 1.2 to 2.3 for Groovy 4.x compatibility
    testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'
    
    constraints {
        testImplementation 'org.apache.avro:avro:1.11.3'
    }
    
    // Updated test utilities
    testImplementation 'cglib:cglib-nodep:3.3.0'
    testImplementation 'org.objenesis:objenesis:3.3'
    testImplementation 'org.spf4j:spf4j-slf4j-test:8.10.0'
}

test {
    useJUnitPlatform()
    jvmArgs = [
        '--add-opens=java.base/java.lang=ALL-UNNAMED',
        '--add-opens=java.base/java.util=ALL-UNNAMED',
        '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED',
        '--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED',
        '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED',
        '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
        '--add-opens=java.base/java.net=ALL-UNNAMED',
        '--add-opens=java.base/java.nio=ALL-UNNAMED',
        '--add-opens=java.base/java.text=ALL-UNNAMED',
        '--add-opens=java.base/java.time=ALL-UNNAMED',
        '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED',
        '--add-opens=java.base/sun.nio.cs=ALL-UNNAMED',
        '--add-opens=java.base/sun.security.util=ALL-UNNAMED',
        '--add-opens=java.base/sun.net.util=ALL-UNNAMED',
        '--add-opens=java.logging/java.util.logging=ALL-UNNAMED'
    ]
}


configurations.testImplementation {
    //Exclude slf4j for testing so that spf4j-slf4j-test is used instead
    exclude group: 'org.slf4j', module: 'slf4j-simple'
}

// Remove the old delombok task - the new lombok plugin handles this differently
// The new plugin automatically handles delombok for javadoc generation

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    failOnError = false
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allJava
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}
artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

publishing {
    repositories {
        maven {
            name = "MavenCentral"
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            def tagVersion = findProperty("tag.version") as String
            version = (tagVersion && !tagVersion.empty)? tagVersion : project.getVersion()
            url = uri((version.toString().endsWith("SNAPSHOT"))? snapshotsRepoUrl : releasesRepoUrl)
            credentials {
                username = findProperty("sonatype.user")
                password = findProperty("sonatype.password")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'sdk-fhr-ab-testing'
            artifact jar.archivePath
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'FHR A/B Testing SDK'
                description = 'The Fredhopper A/B Testing SDK is a software library which simplifies adding' +
                        ' A/B testing of Fredhopper merchandising rules and configuration to your website backend'
                url = 'https://github.com/Attraqt/sdk-fhr-ab-testing'
                def tagVersion = findProperty("tag.version") as String
                version = (tagVersion && !tagVersion.empty)? tagVersion : project.getVersion()
                licenses {
                    license {
                        name = 'GNU General Public License, Version 3'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'attraqt'
                        name = 'Attraqt'
                        email = 'contact@attraqt.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/Attraqt/sdk-fhr-ab-testing.git'
                    developerConnection = 'scm:git:ssh://github.com/Attraqt/sdk-fhr-ab-testing.git'
                    url = 'https://github.com/Attraqt/sdk-fhr-ab-testing'
                }
            }
        }
    }
}

signing {
    def signingKey = findProperty("signing.key") as String
    def signingPassword = findProperty("signing.password") as String
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}